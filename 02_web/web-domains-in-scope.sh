#!/bin/bash

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Description:
#     This script takes a list of domain names and checks whether they are wihin a given scope of
#     IPv4 subnets.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Author:
#     @itm4n
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Usage:
#     ./domains_in_scope.sh <DOMAINS_FILE> <SCOPE_FILE> <OUTPUT_FILE>
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Example:
#     ./domains_in_scope.sh domains.txt scope.txt output.txt
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Requirement:
#     'domains.txt' must contain one domain name per line
#     'scope.txt' must contain one IPv4 subnet (CIDR notation) per line
#     'output.txt' will contain a list of "DOMAIN IP" of all the domaines that are in the scope
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DEBUG=0
COLOR_RST="\e[0m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_YELLOW_BOLD="\e[1;33m"
COLOR_CYAN_BOLD="\e[1;36m"

function usage() {
    echo "Usage:"
    echo "    $0 <DOMAINS_FILE> <SCOPE_FILE> <OUTPUT_FILE>"
}

function print_debug() {
    if [ $DEBUG == 1 ]
    then
        echo -e "${COLOR_CYAN_BOLD}[DEBUG]${COLOR_RST} $1"
    fi
}

function print_info() {
    echo -e "${COLOR_CYAN_BOLD}[*]${COLOR_RST} $1"
}

function print_success() {
    echo -e "${COLOR_GREEN_BOLD}[+]${COLOR_RST} $1"
}

function print_warning() {
    echo -e "${COLOR_YELLOW_BOLD}[!]${COLOR_RST} $1"
}

function print_error() {
    echo -e "${COLOR_RED_BOLD}[-]${COLOR_RST} $1"
}

which nmap > /dev/null
if [ $? != 0 ]
then
    print_error "This script requires 'nmap'."
    exit
fi

if [ $# -lt 3 ]
then
    print_error "Missing arguments"
    usage
    exit
fi

CNT_DOMAINS_NOT_RESOLVED=0
CNT_DOMAINS_NO_IPV4=0
CNT_DOMAINS_SCOPE_OUT=0
CNT_DOMAINS_SCOPE_IN=0

FILE_DOMAINS=$1
FILE_SCOPE=$2
FILE_OUTPUT=$3

print_debug "Domains file: '${FILE_DOMAINS}'"
print_debug "Scope file: '${FILE_SCOPE}'"
print_debug "Output file: '${FILE_OUTPUT}'"

if [ ! -f $FILE_DOMAINS ]
then
    print_error "File '${FILE_DOMAINS}' does not exist."
    exit
fi

if [ ! -f $FILE_SCOPE ]
then
    print_error "File '${FILE_SCOPE}' does not exist."
    exit
fi

file_scope_content=$(cat "$FILE_SCOPE")
file_scope_content=$(echo "$file_scope_content" | sort -u)
file_scope_content_count=$(echo "$file_scope_content" | wc -l)

print_debug "File '${FILE_SCOPE}' contains ${file_scope_content_count} unique entries."

scope_ips=""
for scope_item in $file_scope_content
do
    print_debug "Parsing scope item: ${scope_item}"
    
    echo "$scope_item" | grep -q -E '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
    if [ $? == 0 ]
    then
        # The item is an IPv4 subnet
        subnet_ips=$(nmap -sL -n "$scope_item" | awk '/Nmap scan report/{print $NF}')
        scope_ips="${scope_ips}${subnet_ips}"$'\n'
    else
        print_warning "The item '${scope_item}' does not look like an IPv4 subnet."
    fi
done

scope_ips_count=$(echo "$scope_ips" | wc -l)

print_info "There are ${scope_ips_count} in the scope."

file_domains_content=$(cat "$FILE_DOMAINS")
file_domains_content=$(echo "$file_domains_content" | sort -u)
file_domains_content_count=$(echo "$file_domains_content" | wc -l)

print_info "There are ${file_domains_content_count} unique domain names to check."

domains_in_scope=""

for domain in $file_domains_content
do
    host_result=$(host "$domain")
    if [ $? == 0 ]
    then
        echo "$host_result" | grep -q "has address"
        if [ $? == 0 ]
        then
            ip=$(echo "$host_result" | grep "has address" | head -n1 | cut -d' ' -f4)
            
            print_debug "Domain name '${domain}' has IP address ${ip}."
            
            echo "$scope_ips" | grep -q -x "$ip"
            if [ $? == 0 ]
            then
                print_success "Domain name '${domain}' with IP address ${ip} is in scope."
                domains_in_scope="${domains_in_scope}${domain} ${ip}"$'\n'
                CNT_DOMAINS_SCOPE_IN=$((CNT_DOMAINS_SCOPE_IN+1))
            else
                print_warning "Domain name '${domain}' with IP address ${ip} is not in scope."
                CNT_DOMAINS_SCOPE_OUT=$((CNT_DOMAINS_SCOPE_OUT+1))
            fi
        else
            print_error "Failed to find IPv4 address for domain '${domain}'."
            CNT_DOMAINS_NO_IPV4=$((CNT_DOMAINS_NO_IPV4+1))
        fi
    else
        print_error "Failed to resolve domain name '${domain}'."
        CNT_DOMAINS_NOT_RESOLVED=$((CNT_DOMAINS_NOT_RESOLVED+1))
    fi
done

domains_in_scope_count=$(echo "$domains_in_scope" | wc -l)

print_info "Domain names not resolved...............: ${CNT_DOMAINS_NOT_RESOLVED}"
print_info "Domain names with no IPv4 address.......: ${CNT_DOMAINS_NO_IPV4}"
print_info "Domain names that are not in the scope..: ${CNT_DOMAINS_SCOPE_OUT}"
print_info "Domain names that are in the scope......: ${CNT_DOMAINS_SCOPE_IN}"

if [ $CNT_DOMAINS_SCOPE_IN -gt 0 ]
then
    print_success "All done! Writing result to '${FILE_OUTPUT}'."
    echo "$domains_in_scope" > $FILE_OUTPUT
else
    print_warning "The script finished but nothing was found."
fi

