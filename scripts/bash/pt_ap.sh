#!/usr/bin/env bash

### BEGIN SCRIPT HEADER
SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}")
SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
DIR_SCRIPT=$(dirname "${SCRIPT_PATH}")
COMMON="${DIR_SCRIPT}/common.sh"
source "$COMMON" || exit
### END SCRIPT HEADER

### BEGIN COMMON
function print_usage_and_exit() {
    print_info "Usage: ${SCRIPT_NAME} <INT_AP> <INT_WAN> [SSID] [PASSPHRASE] [CHANNEL]"
    exit
}

check_argc $# 2 || print_usage_and_exit
### END COMMON

# Customizable parameters
INT_AP=$1 # e.g. wlan0
INT_WAN=$2 # e.g. eth0
AP_SSID="TEST_AP"
AP_PASSPHRASE="SuperP@ss123"
AP_CHANNEL=11

if [ $# -ge 3 ];
then
    AP_SSID=$3
    print_info "Using custom SSID: ${AP_SSID}"
else
    print_info "Using default SSID: ${AP_SSID}"
fi

if [ $# -ge 4 ];
then
    AP_PASSPHRASE=$4
    print_info "Using custom passphrase: ${AP_PASSPHRASE}"
else
    print_info "Using default passphrase: ${AP_PASSPHRASE}"
fi

if [ $# -ge 5 ];
then
    AP_CHANNEL=$5
    print_info "Using custom channel: ${AP_CHANNEL}"
else
    print_info "Using default channel: ${AP_CHANNEL}"
fi

# Hardcoded parameters
AP_DHCP_RANGE="10.0.0.10,10.0.0.100"
AP_DHCP_MASK="255.255.255.0"
AP_DHCP_CIDR="24"
AP_DHCP_GW="10.0.0.1"
AP_DHCP_DNS="10.0.0.1"
CONFIG_DNSMASQ="/tmp/ap_dnsmasq.conf"
CONFIG_DNSMASQ_HOSTS="/tmp/ap_dnsmasq_hosts.txt"
CONFIG_HOSTAPD="/tmp/ap_hostapd.conf"

# Global flags
FLAG_NETWORK_MANAGER_RUNNING=0
FLAG_AP_INTERFACE_SET=0
FLAG_NAT_RULE_SET=0
FLAG_USE_HOSTS_FILE=0

trap ctrl_c INT
function ctrl_c() {
	cleanup_and_exit
}

function check_prerequisites() {
    nb_errors=0

    test_is_root || ((nb_errors=nb_errors+1))
    test_network_interface_exists $INT_AP || ((nb_errors=nb_errors+1))
    test_network_interface_exists $INT_WAN || ((nb_errors=nb_errors+1))
    test_command_exists "dnsmasq" || ((nb_errors=nb_errors+1))
    test_command_exists "hostapd" || ((nb_errors=nb_errors+1))
    test_command_exists "iptables" || ((nb_errors=nb_errors+1))
    test_command_exists "killall" || ((nb_errors=nb_errors+1))
    test_command_exists "ip" || ((nb_errors=nb_errors+1))

    if [ $FLAG_NETWORK_MANAGER_RUNNING -eq 1 ];
    then
        test_command_exists "nmcli" || ((nb_errors=nb_errors+1))
    fi

    return $nb_errors
}

function check_initial_system_state() {
    nm_name="network-manager"
    systemctl status ${nm_name} 1>/dev/null 2>&1
    if [ $? -eq 4 ]; # Service does not exist, try with name "NetworkManager"
    then
        nm_name="NetworkManager"
        systemctl status ${nm_name} 1>/dev/null 2>&1
    fi

    if [ $? -eq 0 ]; # Network Manager is installed and running
    then
        FLAG_NETWORK_MANAGER_RUNNING=1
    fi

    if [ -f "${CONFIG_DNSMASQ_HOSTS}" ];
    then
        print_info "Found custom hosts file: ${CONFIG_DNSMASQ_HOSTS}"
        FLAG_USE_HOSTS_FILE=1
    fi
}

function add_nat_rule() {
    iptables --table nat -A POSTROUTING -o $INT_WAN -j MASQUERADE >/dev/null
    if [ $? -ne 0 ];
    then
        print_error "Failed to add NAT rule."
        return 1
    fi
    FLAG_NAT_RULE_SET=1
    return 0
}

function configure_ap_interface() {
    nb_errors=0

    print_info "Configuring interface '${INT_AP}'."
    ip link set "${INT_AP}" down || ((nb_errors=nb_errors+1))
    ip addr flush dev "${INT_AP}" || ((nb_errors=nb_errors+1))
    ip addr add "${AP_DHCP_GW}/${AP_DHCP_CIDR}" dev "${INT_AP}" || ((nb_errors=nb_errors+1))
    ip link set "${INT_AP}" up || ((nb_errors=nb_errors+1))

    if [ $nb_errors -ne 0 ];
    then
        print_error "Failed to configure interface '${INT_AP}'."
        return $nb_errors
    fi

    FLAG_AP_INTERFACE_SET=1
    
    return $nb_errors
}

function reset_ap_interface() {
    ip link set "${INT_AP}" down
    ip addr flush dev "${INT_AP}"
    ip link set "${INT_AP}" up
}

function prepare_system() {
    nb_errors=0
    add_nat_rule "iptables" || ((nb_errors=nb_errors+1))

    if [ $FLAG_NETWORK_MANAGER_RUNNING -eq 1 ];
    then
        print_info "Network Manager is running, setting interface '${INT_AP}' as unmanaged."
        nmcli device set "${INT_AP}" managed no >/dev/null 2>&1 || ((nb_errors=nb_errors+1))
    fi

    return $nb_errors
}

function generate_dnsmasq_config_file() {
    config=""
    config="${config}interface=${INT_AP}\n" # Set interface to listen on
    config="${config}dhcp-range=${AP_DHCP_RANGE}\n" # Set DHCP IP range
    config="${config}dhcp-option=3,${AP_DHCP_GW}\n" # Set default gateway in DHCP options
    config="${config}dhcp-option=6,${AP_DHCP_DNS}\n" # Set DNS server in DHCP options
    config="${config}no-hosts\n" # Do not read /etc/hosts file
    if [ $FLAG_USE_HOSTS_FILE -eq 1 ];
    then
        config="${config}addn-hosts=${CONFIG_DNSMASQ_HOSTS}\n" # Use a custom hosts file
    fi

    echo -e $config > $CONFIG_DNSMASQ

    if [ ! -f $CONFIG_DNSMASQ ];
    then
        print_error "Failed to create dnsmasq config file: ${CONFIG_DNSMASQ}"
        return 1
    fi

    print_success "Created dnsmasq config file: ${CONFIG_DNSMASQ}"
}

function generate_hostapd_config_file() {
    config=""
    config="${config}interface=$INT_AP\n"
    # config="${config}driver=nl80211\n"
    config="${config}ssid=$AP_SSID\n"
    config="${config}hw_mode=g\n"
    config="${config}channel=$AP_CHANNEL\n"
    config="${config}wpa=2\n"
    config="${config}wpa_passphrase=$AP_PASSPHRASE\n"
    config="${config}wpa_key_mgmt=WPA-PSK\n"

    echo -e $config > $CONFIG_HOSTAPD

    if [ ! -f $CONFIG_HOSTAPD ];
    then
        print_error "Failed to create hostapd config file: ${CONFIG_HOSTAPD}"
        return 1
    fi

    print_success "Created dnsmasq config file: ${CONFIG_HOSTAPD}"
}

function start_access_point() {
    print_info "Starting dnsmasq as a daemon."
    dnsmasq -C "${CONFIG_DNSMASQ}"

    if [ $FLAG_USE_HOSTS_FILE -eq 0 ];
    then
        print_info "You can define custom DNS entries by creating the file '${CONFIG_DNSMASQ_HOSTS}' (stop and restart to apply)."
    fi

    print_info "Starting hostapd. Use Ctrl+C to exit."
    hostapd "${CONFIG_HOSTAPD}"
}

function remove_nat_rule() {
    iptables --table nat -D POSTROUTING -o $INT_WAN -j MASQUERADE >/dev/null
    if [ $? -ne 0 ];
    then
        print_error "Failed to remove NAT rule."
        return 1
    fi
    FLAG_NAT_RULE_SET=0
    return 0
}

function cleanup_and_exit() {
    print_info "Restoring initial system state."

    killall dnsmasq 2>/dev/null
    killall hostapd 2>/dev/null

    if [ $FLAG_AP_INTERFACE_SET -eq 1 ];
    then
        reset_ap_interface
    fi

    if [ -f "${CONFIG_DNSMASQ}" ];
    then
        rm -f "${CONFIG_DNSMASQ}"
    fi

    if [ -f "${CONFIG_HOSTAPD}" ];
    then
        rm -f "${CONFIG_HOSTAPD}"
    fi

    if [ $FLAG_NAT_RULE_SET -eq 1 ];
    then
        remove_nat_rule
    fi

    if [ $FLAG_NETWORK_MANAGER_RUNNING -eq 1 ];
    then
        nmcli device set ${INT_AP} managed yes >/dev/null 2>&1
    fi

    exit
}

check_initial_system_state
check_prerequisites || exit
prepare_system || cleanup_and_exit
configure_ap_interface || cleanup_and_exit
generate_dnsmasq_config_file || cleanup_and_exit
generate_hostapd_config_file || cleanup_and_exit
start_access_point
cleanup_and_exit