#!/bin/bash

INT_AP="wlan0"
INT_WAN="eth0"

AP_SSID="kali-itm4n"
AP_PASSPHRASE="SuperP@ss123"
AP_CHANNEL=11
AP_DHCP_RANGE="10.0.0.10,10.0.0.100"
AP_DHCP_MASK="255.255.255.0"
AP_DHCP_GW="10.0.0.1"
AP_DHCP_DNS="10.0.0.1"

CONFIG_DNSMASQ="/tmp/ap_dnsmasq.conf"
CONFIG_HOSTAPD="/tmp/ap_hostapd.conf"

COLOR_RST="\e[0m"
COLOR_RED_BOLD="\e[1;31m"
COLOR_GREEN_BOLD="\e[1;32m"
COLOR_CYAN_BOLD="\e[1;36m"

FLAG_NETWORK_MANAGER_RUNNING=0
FLAG_IP_FORWARD=0
FLAG_IPTABLE_SET=0

trap ctrl_c INT
function ctrl_c() {
    killall dnsmasq 2>/dev/null 
    killall hostapd 2>/dev/null 
	cleanup_and_exit
}

function check_interface() {
    # Usage check_interface "eth0"
    # Returns: 0 if interface exists, >0 otherwise
    ip link show | grep $1 1>/dev/null 
    return $?
}

function is_package_installed() {
    # Usage: is_package_installed "dnsmasq-base"
    # Returns: 0 if installed, >0 otherwise
    dpkg -s $1 1>/dev/null 2>&1
    return $?
}

function check_prerequisites() {
    nb_errors=0

    # Check if current user is root
    echo -ne "$COLOR_CYAN_BOLD    |__ Checking if current user is root$COLOR_RST"
    if [ ! $(id -u) == 0 ];
    then
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    else
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    fi

    package="dnsmasq-base"
    echo -ne "$COLOR_CYAN_BOLD    |__ Checking package: '$package'$COLOR_RST"
    is_package_installed $package
    if [ ! $? == 0 ]
    then
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    else
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    fi

    package="hostapd"
    echo -ne "$COLOR_CYAN_BOLD    |__ Checking package: '$package'$COLOR_RST"
    is_package_installed $package
    if [ ! $? == 0 ]
    then
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    else
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    fi

    interface=$INT_AP
    echo -ne "$COLOR_CYAN_BOLD    |__ Checking interface: '$interface'$COLOR_RST"
    check_interface $interface
    if [ ! $? == 0 ]
    then
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    else
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    fi

    interface=$INT_WAN
    echo -ne "$COLOR_CYAN_BOLD    |__ Checking interface: '$interface'$COLOR_RST"
    check_interface $interface
    if [ ! $? == 0 ]
    then
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    else
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    fi

    return $nb_errors
}

function check_current_system_state() {

    # Check whether network manager is running
    echo -ne "$COLOR_CYAN_BOLD    |__ Network Manager status:$COLOR_RST"
    systemctl status network-manager 1>/dev/null
    FLAG_NETWORK_MANAGER_RUNNING=$?
    if [ $FLAG_NETWORK_MANAGER_RUNNING == 0 ]
    then
        echo -e "$COLOR_RED_BOLD RUNNING$COLOR_RST"
    else
        echo -e "$COLOR_GREEN_BOLD STOPPED$COLOR_RST"
    fi
    
    # Check ip forward status
    FLAG_IP_FORWARD=$(cat "/proc/sys/net/ipv4/ip_forward")
    echo -ne "$COLOR_CYAN_BOLD    |__ IP forwarding status:$COLOR_RST"
    if [ $FLAG_IP_FORWARD == 0 ]
    then
        echo -e "$COLOR_RED_BOLD DISABLED$COLOR_RST"
    else
        echo -e "$COLOR_GREEN_BOLD ENABLED$COLOR_RST"
    fi
}

function prepare_system() {
    nb_errors=0
    
    # Stop Network Manager if it's running 
    if [ $FLAG_NETWORK_MANAGER_RUNNING == 0 ]
    then
        echo -ne "$COLOR_CYAN_BOLD    |__ Stopping network-manager$COLOR_RST"
        systemctl stop network-manager 1>/dev/null
        if [ $? == 0 ]
        then
            echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
        else
            echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
            ((nb_errors=nb_errors+1))
        fi
    fi
    
    # Enable ip forward if it's disabled
    if [ $FLAG_IP_FORWARD == 0 ]
    then
        echo -ne "$COLOR_CYAN_BOLD    |__ Enabling IP forward$COLOR_RST"
        echo 1 > /proc/sys/net/ipv4/ip_forward
        if [ $(cat /proc/sys/net/ipv4/ip_forward) == 1 ]
        then
            echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
        else
            echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
            ((nb_errors=nb_errors+1))
        fi
    fi
    
    return $nb_errors
}

function restore_system_state() {
    nb_errors=0

    # Start Network Manager if we disabled it
    if [ $FLAG_NETWORK_MANAGER_RUNNING == 0 ]
    then
        echo -ne "$COLOR_CYAN_BOLD    |__ Starting network-manager$COLOR_RST"
        systemctl start network-manager 1>/dev/null
        if [ $? == 0 ]
        then
            echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
        else
            echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
            ((nb_errors=nb_errors+1))
        fi
    fi
    
    # Disable ip forward if we enabled it
    if [ $FLAG_IP_FORWARD == 0 ]
    then
        echo -ne "$COLOR_CYAN_BOLD    |__ Diabling IP forward$COLOR_RST"
        echo 0 > /proc/sys/net/ipv4/ip_forward
        if [ $(cat /proc/sys/net/ipv4/ip_forward) == 0 ]
        then
            echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
        else
            echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
            ((nb_errors=nb_errors+1))
        fi
    fi
    
    return $nb_errors
}

function set_iptable_rules() {
    nb_errors=0
    
    #iptables -t nat -F
    #iptables -P FORWARD ACCEPT
    echo -ne "$COLOR_CYAN_BOLD    |__ Configuring NAT rule$COLOR_RST"
    iptables --table nat -A POSTROUTING -o $INT_WAN -j MASQUERADE 1>/dev/null
    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    FLAG_IPTABLE_SET=1
    
    return $nb_errors
}

function unset_iptable_rules() {
    nb_errors=0
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Removing NAT rule$COLOR_RST"
    iptables --table nat -D POSTROUTING -o $INT_WAN -j MASQUERADE 1>/dev/null
    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    return $nb_errors
}

function configure_ap_interface() {
    nb_errors=0
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Shutting down interface$COLOR_RST"
    ifconfig $INT_AP down
    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Setting IP address$COLOR_RST"
    ifconfig $INT_AP $AP_DHCP_GW netmask $AP_DHCP_MASK
    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Starting interface$COLOR_RST"
    ifconfig $INT_AP up
    if [ $? == 0 ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    return $nb_errors
}

function generate_config_files() {
    
    config=""
    config="${config}interface=$INT_AP\n"
    config="${config}dhcp-range=$AP_DHCP_RANGE\n"
    config="${config}dhcp-option=3,$AP_DHCP_GW\n"
    config="${config}dhcp-option=6,$AP_DHCP_DNS\n"
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Writing dnsmasq config file$COLOR_RST"
    echo -e $config > $CONFIG_DNSMASQ
    
    if [ -f $CONFIG_DNSMASQ ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    config=""
    config="${config}interface=$INT_AP\n"
    config="${config}driver=nl80211\n"
    config="${config}ssid=$AP_SSID\n"
    config="${config}hw_mode=g\n"
    config="${config}channel=$AP_CHANNEL\n"
    config="${config}wpa=2\n"
    config="${config}wpa_passphrase=$AP_PASSPHRASE\n"
    config="${config}wpa_key_mgmt=WPA-PSK\n"
    
    echo -ne "$COLOR_CYAN_BOLD    |__ Writing hostapd config file$COLOR_RST"
    echo -e $config > $CONFIG_HOSTAPD
    
    if [ -f $CONFIG_HOSTAPD ]
    then
        echo -e "$COLOR_GREEN_BOLD OK $COLOR_RST"
    else
        echo -e "$COLOR_RED_BOLD KO $COLOR_RST"
        ((nb_errors=nb_errors+1))
    fi
    
    return 0
}

function delete_config_files() {
    
    if [ -f $CONFIG_DNSMASQ ]
    then
        rm $CONFIG_DNSMASQ 2>/dev/null
    fi
    
    if [ -f $CONFIG_HOSTAPD ]
    then
        rm $CONFIG_HOSTAPD 2>/dev/null
    fi
}

function start_access_point() {

    echo -e "$COLOR_CYAN_BOLD    |__ Starting dnsmasq$COLOR_RST"
    dnsmasq -C $CONFIG_DNSMASQ
    
    echo -e "$COLOR_CYAN_BOLD    |__ Starting hostapd (Ctrl+C to cleanup and exit)$COLOR_RST"
    hostapd $CONFIG_HOSTAPD
}

function cleanup_and_exit() {

    delete_config_files
    
    if [ ! $FLAG_IPTABLE_SET == 0 ]
    then
        echo -e "$COLOR_CYAN_BOLD[*] Restoring iptable config.$COLOR_RST"
        unset_iptable_rules
    fi
    
    echo -e "$COLOR_CYAN_BOLD[*] Restoring system state.$COLOR_RST"
    restore_system_state
    
    exit
}

echo -e "$COLOR_CYAN_BOLD[*] Checking prerequisites.$COLOR_RST"
check_prerequisites || exit

echo -e "$COLOR_CYAN_BOLD[*] Checking current system state.$COLOR_RST"
check_current_system_state || exit

echo -e "$COLOR_CYAN_BOLD[*] Preparing system.$COLOR_RST"
prepare_system || cleanup_and_exit

echo -e "$COLOR_CYAN_BOLD[*] Configuring iptable.$COLOR_RST"
set_iptable_rules || cleanup_and_exit

echo -e "$COLOR_CYAN_BOLD[*] Configuring interface '$INT_AP'.$COLOR_RST"
configure_ap_interface || cleanup_and_exit

echo -e "$COLOR_CYAN_BOLD[*] Generating config files.$COLOR_RST"
generate_config_files || cleanup_and_exit

echo -e "$COLOR_CYAN_BOLD[*] Starting access point.$COLOR_RST"
start_access_point

cleanup_and_exit

